package seta;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import rideOld.RideOld;
import utils.Position;
import utils.Utils;

import java.util.Random;

/* Main process that simulates the taxi service requests generated by the
citizens of the smart city. */
public class Seta {
    public static MqttClient client;
    public static MqttConnectOptions connOpts;
    public static String[] topics;
    public static int qos;

    public static void main (String argv[]){
        try {
            initializeComponents();
            //The client is now connected to the broker
            client.connect(connOpts);
            while (true){
                //Seta starts creating the rides
                createNewRide(String.valueOf(new Random()));
                Thread.sleep(5000);
            }
        }catch (MqttException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void initializeComponents() throws MqttException {
        topics = new String[]{"seta/smartcity/rides/district1",
                              "seta/smartcity/rides/district2",
                              "seta/smartcity/rides/district3",
                              "seta/smartcity/rides/district4"};
        client = new MqttClient(Utils.MQTTBrokerAddress, MqttClient.generateClientId());
        connOpts = new MqttConnectOptions();
        connOpts.setCleanSession(true);         //session will be persistent
        qos = 2;      //quality of service set to 2
    }

    public static RideOld createNewRide(String id){
        Position start = Utils.getRandomPosition();
        Position finish;
        do {
            finish = Utils.getRandomPosition();
        }while (finish.equals(start));

        return new RideOld(id, start, finish);
    }

    public static void publishRide(RideOld rideOld){
        //MqttMessage message = new MqttMessage(ride.get);
    }

}
