package seta;

import com.google.protobuf.TextFormat;
import org.eclipse.paho.client.mqttv3.*;
import ride.Ride;
import unimi.dps.ride.Ride.RideMsg;
import utils.Position;
import utils.Utils;

import java.sql.Timestamp;
import java.util.Random;

/* Main process that simulates the taxi service requests generated by the
citizens of the smart city. */
public class Seta {
    private SetaUtils setaUtils;
    private int rideCounter = 0;

    public Seta() {
        setaUtils = SetaUtils.getInstance();
    }

    public static void main (String argv[]){
        Seta seta = new Seta();
        seta.start();
    }

    public void start(){
        try {
            initializeComponents();
            System.out.println("> Seta correctly initialized.");
            while (true){
                // Two rides are published every 5 seconds through the use of threads
                publishRide();
                publishRide();
                printSetaStatus();
                setaUtils.resetIsSentStatus();
                // Reset is sent status
                Thread.sleep(10000);
            }
        }catch (MqttException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    public void initializeComponents() throws MqttException {

        setaUtils.setClient( new MqttClient(Utils.MQTTBrokerAddress, MqttClient.generateClientId()));
        setaUtils.setConnOpts(new MqttConnectOptions());
        setaUtils.getConnOpts().setCleanSession(true);
        setaUtils.setQos(2);
        //The client is now connected to the broker
        setaUtils.getClient().connect(setaUtils.getConnOpts());

        setaUtils.getClient().setCallback(new MqttCallback() {
            @Override
            public void connectionLost(Throwable cause) {

            }

            @Override
            public void messageArrived(String topic, MqttMessage message) throws Exception {
                String time = new Timestamp(System.currentTimeMillis()).toString();
                if (topic.equals(Utils.TAKEN_RIDE)){
                    RideMsg rideMsg =  RideMsg.parseFrom(message.getPayload());
                    System.out.println("> RIDE COMPLETED");
                    setaUtils.removePendingRideFromMap(rideMsg);
                }else {
                    String topic2 = topic.substring(0,topic.length() - 1);
                    switch (topic2){
                        case Utils.TAXI_AVAILABLE:     //Update counter for the taxi in each district
                            int k1 = Integer.parseInt(String.valueOf(topic.charAt(topic.length() -1 )));
                            System.out.println("> TAXI AVAILABLE AT DISTRICT "+k1);
                            setaUtils.updateNTaxiMap(k1, setaUtils.getNTaxiForDistrict(k1) +1 );
                            break;
                        case Utils.TAXI_UNAVAILABLE:
                            int k2 = Integer.parseInt(String.valueOf(topic.charAt(topic.length() -1 )));
                            System.out.println("> TAXI CHANGED DISTRICT: " + k2);
                            setaUtils.updateNTaxiMap(k2, Math.max(setaUtils.getNTaxiForDistrict(k2) - 1, 0));
                            break;
                    }
                }
            }

            @Override
            public void deliveryComplete(IMqttDeliveryToken token) {

            }
        });

        // Subscribes to various topics
        setaUtils.getClient().subscribe(Utils.TAKEN_RIDE, setaUtils.getQos());
        setaUtils.getClient().subscribe(Utils.TAXI_AVAILABLE + "#", setaUtils.getQos());
        setaUtils.getClient().subscribe(Utils.TAXI_UNAVAILABLE + "#", setaUtils.getQos());
    }

    public void publishRide() throws MqttException, InterruptedException {
        unimi.dps.ride.Ride.RideMsg rideMsg;
        /* If there is a taxi available, publishes again a pending ride, otherwise
         * create a new ride from scratch */
        Ride r = null;
        for(int i=1; i<=4; i++){
            if (setaUtils.getPendingRidesFromDistrict(i) != null){
                // There is at least a taxi available and a pending ride in that district
                if (setaUtils.getNTaxiForDistrict(i) > 0 && setaUtils.getPendingRidesFromDistrict(i).size()>0){
                    //Gets the first pending ride
                    r = getPendingRideFromDistrict(i);
                    break;
                }
            }
        }
        /* No taxi available or pending rides were found, create new ride */
        if (r == null){
            r = createNewRide(String.valueOf(++rideCounter));
            r.setSent(true);
            setaUtils.addPendingRideToMap(r);
            System.out.println("> D"+Utils.getDistrictFromPosition(r.getStart())+" PUBLISHING NEW RIDE:" + r);
        }else{
            System.out.println("> D"+Utils.getDistrictFromPosition(r.getStart())+" PUBLISHING PENDING RIDE:" + r);
        }

        rideMsg = r.createRideMsg();

        MqttMessage msg = new MqttMessage(rideMsg.toByteArray());
        msg.setQos(setaUtils.getQos());
        setaUtils.getClient().publish(Utils.getDistrictTopicFromPosition(new Position(rideMsg.getStart())), msg);
    }

    /* Create a new ride */
    private Ride createNewRide(String id){
        Position start = Utils.getRandomPosition();
        Position finish;
        do {
            finish = Utils.getRandomPosition();
        }while (finish.equals(start));

        // Sets the message with the ride infos to be sent to the taxi network
        return new Ride(id, start, finish);
    }


    public synchronized Ride getPendingRideFromDistrict(int distr) {

        //Takes the first ride that was not sent
        Ride r = setaUtils.getPendingRidesFromDistrict(distr)
                .stream()
                .filter(ride -> !ride.wasSent())
                .findFirst().orElse(null);

        if (r != null)
            setaUtils.getPendingRidesFromDistrict(distr)
                    .stream()
                    .filter(ride -> r.getId().equals(ride.getId())).findFirst().get().setSent(true);

        return r;
    }

    private void printSetaStatus(){
        StringBuilder bdr = new StringBuilder("> Current SETA status: ").append("\n");
        for(int i = 1; i<= 4 ; i++){
            bdr.append(" DSTR").append(i).append(": ").append(setaUtils.getNTaxiForDistrict(i)).append(" taxi; ");
            if (setaUtils.getPendingRidesFromDistrict(i) != null)
                bdr.append(setaUtils.getPendingRidesFromDistrict(i).size());
            else
                bdr.append("0");

            bdr.append(" RIDES").append("\n");
        }
        System.out.println(bdr);
    }
}
