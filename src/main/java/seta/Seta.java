package seta;

import org.eclipse.paho.client.mqttv3.*;
import seta.modules.PublishRideThread;
import unimi.dps.ride.Ride.RideMsg;
import utils.Utils;

import java.sql.Timestamp;

/* Main process that simulates the taxi service requests generated by the
citizens of the smart city. */
public class Seta {
    private SetaUtils setaUtils;

    public Seta() {
        setaUtils = SetaUtils.getInstance();
    }

    public static void main (String argv[]){
        Seta seta = new Seta();
        seta.start();
    }

    public void start(){
        try {
            initializeComponents();
            System.out.println("> Seta correctly initialized.");
//            BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));

/*            while(true) {
                System.out.println("> press ENTER to create a ride\n");
                try {
                    if (inFromUser.readLine().equals(""));
                    publishNewRide();
                }catch (Exception e){
                    System.out.println("An error occurred. Please insert a value\n");
                }
            }*/
            while (true){
                // Two rides are published every 5 seconds through the use of threads
                PublishRideThread t1,t2;
                t1 = new PublishRideThread();
                t2 = new PublishRideThread();
                t1.start();
                t2.start();
                t1.join();
                t2.join();
                printSetaStatus();
                setaUtils.resetIsSentStatus();
                // Reset is sent status
                Thread.sleep(10000);
            }
        }catch (MqttException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    public void initializeComponents() throws MqttException {

        setaUtils.setClient( new MqttClient(Utils.MQTTBrokerAddress, MqttClient.generateClientId()));
        setaUtils.setConnOpts(new MqttConnectOptions());
        setaUtils.getConnOpts().setCleanSession(true);
        setaUtils.setQos(2);
        //The client is now connected to the broker
        setaUtils.getClient().connect(setaUtils.getConnOpts());

        setaUtils.getClient().setCallback(new MqttCallback() {
            @Override
            public void connectionLost(Throwable cause) {

            }

            @Override
            public void messageArrived(String topic, MqttMessage message) throws Exception {
                String time = new Timestamp(System.currentTimeMillis()).toString();
                if (topic.equals(Utils.TAKEN_RIDE)){
                    RideMsg rideMsg =  RideMsg.parseFrom(message.getPayload());
                    System.out.println("> RIDE COMPLETED");
                    setaUtils.removePendingRideFromMap(rideMsg);
                }else {
                    String topic2 = topic.substring(0,topic.length() - 1);
                    switch (topic2){
                        case Utils.TAXI_AVAILABLE:     //Update counter for the taxi in each district
                            int k1 = Integer.parseInt(String.valueOf(topic.charAt(topic.length() -1 )));
                            System.out.println("> TAXI AVAILABLE AT DISTRICT "+k1);
                            setaUtils.updateNTaxiMap(k1, setaUtils.getNTaxiForDistrict(k1) +1 );
                            break;
                        case Utils.TAXI_UNAVAILABLE:
                            int k2 = Integer.parseInt(String.valueOf(topic.charAt(topic.length() -1 )));
                            System.out.println("> TAXI CHANGED DISTRICT: " + k2);
                            setaUtils.updateNTaxiMap(k2, setaUtils.getNTaxiForDistrict(k2) -1 );
                            break;
                    }
                }
            }

            @Override
            public void deliveryComplete(IMqttDeliveryToken token) {

            }
        });

        // Subscribes to various topics
        setaUtils.getClient().subscribe(Utils.TAKEN_RIDE, setaUtils.getQos());
        setaUtils.getClient().subscribe(Utils.TAXI_AVAILABLE + "#", setaUtils.getQos());
        setaUtils.getClient().subscribe(Utils.TAXI_UNAVAILABLE + "#", setaUtils.getQos());
    }

    private void printSetaStatus(){
        StringBuilder bdr = new StringBuilder("> Current SETA status: ").append("\n");
        for(int i = 1; i<= 4 ; i++){
            bdr.append(" DSTR").append(i).append(": ").append(setaUtils.getNTaxiForDistrict(i)).append(" taxi; ");
            if (setaUtils.getPendingRidesFromDistrict(i) != null)
                bdr.append(setaUtils.getPendingRidesFromDistrict(i).size());
            else
                bdr.append("0");

            bdr.append(" RIDES").append("\n");
        }
        System.out.println(bdr);
    }
}
